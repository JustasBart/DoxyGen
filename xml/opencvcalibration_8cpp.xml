<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="opencvcalibration_8cpp" kind="file" language="C++">
    <compoundname>opencvcalibration.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">time.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">opencv2/core/core.hpp</includes>
    <includes local="no">opencv2/imgproc/imgproc.hpp</includes>
    <includes local="no">opencv2/calib3d/calib3d.hpp</includes>
    <includes local="no">opencv2/highgui/highgui.hpp</includes>
    <incdepgraph>
      <node id="875">
        <label>opencv2/core/core.hpp</label>
      </node>
      <node id="870">
        <label>opencvcalibration.cpp</label>
        <link refid="opencvcalibration_8cpp"/>
        <childnode refid="871" relation="include">
        </childnode>
        <childnode refid="872" relation="include">
        </childnode>
        <childnode refid="873" relation="include">
        </childnode>
        <childnode refid="874" relation="include">
        </childnode>
        <childnode refid="875" relation="include">
        </childnode>
        <childnode refid="876" relation="include">
        </childnode>
        <childnode refid="877" relation="include">
        </childnode>
        <childnode refid="878" relation="include">
        </childnode>
      </node>
      <node id="876">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="872">
        <label>sstream</label>
      </node>
      <node id="873">
        <label>time.h</label>
      </node>
      <node id="878">
        <label>opencv2/highgui/highgui.hpp</label>
      </node>
      <node id="871">
        <label>iostream</label>
      </node>
      <node id="874">
        <label>stdio.h</label>
      </node>
      <node id="877">
        <label>opencv2/calib3d/calib3d.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_settings" prot="public">Settings</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="opencvcalibration_8cpp_1af08ec37a8c99d747fb60fa15bc28678b" prot="public" static="no">
        <name>_CRT_SECURE_NO_WARNINGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencvcalibration.cpp" line="12" column="10" bodyfile="opencvcalibration.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name>@0</name>
        <enumvalue id="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba167a7ee1aabe9f27e010fff93c0ba971" prot="public">
          <name>DETECTION</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba53f5d985011ab26db21516188f46a94f" prot="public">
          <name>CAPTURING</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55baf7834eaf5a327e180e039aa05dd3ebd1" prot="public">
          <name>CALIBRATED</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencvcalibration.cpp" line="222" column="1" bodyfile="opencvcalibration.cpp" bodystart="222" bodyend="222"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="opencvcalibration_8cpp_1ad8c51bbfda76f19f61c727838e6eee30" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void help</definition>
        <argsstring>()</argsstring>
        <name>help</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencvcalibration.cpp" line="18" column="1" bodyfile="opencvcalibration.cpp" bodystart="18" bodyend="24"/>
        <referencedby refid="opencvcalibration_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="opencvcalibration_8cpp" startline="227" endline="391">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="opencvcalibration_8cpp_1af02cd4568d8391f719476b7ea59b1850" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void read</definition>
        <argsstring>(const FileNode &amp;node, Settings &amp;x, const Settings &amp;default_value=Settings())</argsstring>
        <name>read</name>
        <param>
          <type>const FileNode &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="class_settings" kindref="compound">Settings</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_settings" kindref="compound">Settings</ref> &amp;</type>
          <declname>default_value</declname>
          <defval><ref refid="class_settings" kindref="compound">Settings</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencvcalibration.cpp" line="214" column="1" bodyfile="opencvcalibration.cpp" bodystart="214" bodyend="220"/>
        <references refid="class_settings_1a2d7841f8441095032e0f3b7d20adfd3f" compoundref="opencvcalibration_8cpp" startline="54" endline="72">Settings::read</references>
      </memberdef>
      <memberdef kind="function" id="opencvcalibration_8cpp_1ac7558c8da6af683fc1c86c2ede7bb31c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool runCalibrationAndSave</definition>
        <argsstring>(Settings &amp;s, Size imageSize, Mat &amp;cameraMatrix, Mat &amp;distCoeffs, vector&lt; vector&lt; Point2f &gt; &gt; imagePoints)</argsstring>
        <name>runCalibrationAndSave</name>
        <param>
          <type><ref refid="class_settings" kindref="compound">Settings</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Size</type>
          <declname>imageSize</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; Point2f &gt; &gt;</type>
          <declname>imagePoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencvcalibration.cpp" line="224" column="1" bodyfile="opencvcalibration.cpp" bodystart="552" bodyend="567"/>
        <references refid="opencvcalibration_8cpp_1a7ee968c34a2834af6e2064abfc0e8a33" compoundref="opencvcalibration_8cpp" startline="443" endline="471">runCalibration</references>
        <references refid="opencvcalibration_8cpp_1af5f02ae74089537e31f8d4e3cb83e46d" compoundref="opencvcalibration_8cpp" startline="474" endline="550">saveCameraParams</references>
        <referencedby refid="opencvcalibration_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="opencvcalibration_8cpp" startline="227" endline="391">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="opencvcalibration_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencvcalibration.cpp" line="227" column="1" bodyfile="opencvcalibration.cpp" bodystart="227" bodyend="391"/>
        <references refid="opencvcalibration_8cpp_1ad8c51bbfda76f19f61c727838e6eee30" compoundref="opencvcalibration_8cpp" startline="18" endline="24">help</references>
        <references refid="class_settings_1a89fb14ce9856fb642f18bb0f7c5b8868" compoundref="opencvcalibration_8cpp" startline="204">Settings::inputType</references>
        <references refid="class_settings_1a5afe85d24b071973a7f248c05386f7f4a292bd2e5ba912a92ace1606e366edc4d" compoundref="opencvcalibration_8cpp" startline="30">Settings::IMAGE_LIST</references>
        <references refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba53f5d985011ab26db21516188f46a94f" compoundref="opencvcalibration_8cpp" startline="222">CAPTURING</references>
        <references refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba167a7ee1aabe9f27e010fff93c0ba971" compoundref="opencvcalibration_8cpp" startline="222">DETECTION</references>
        <references refid="opencvcalibration_8cpp_1ac7558c8da6af683fc1c86c2ede7bb31c" compoundref="opencvcalibration_8cpp" startline="552" endline="567">runCalibrationAndSave</references>
        <references refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55baf7834eaf5a327e180e039aa05dd3ebd1" compoundref="opencvcalibration_8cpp" startline="222">CALIBRATED</references>
        <references refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8ae96aa2d60b4a554a215524a05b32908e" compoundref="opencvcalibration_8cpp" startline="29">Settings::CHESSBOARD</references>
        <references refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8a79472d1c69f8ed7aa1b55f908b136f68" compoundref="opencvcalibration_8cpp" startline="29">Settings::CIRCLES_GRID</references>
        <references refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8a2cea29ee5896f2cb4cc64df25fd2375b" compoundref="opencvcalibration_8cpp" startline="29">Settings::ASYMMETRIC_CIRCLES_GRID</references>
      </memberdef>
      <memberdef kind="function" id="opencvcalibration_8cpp_1a2277a0ba6f2ae1de4ae57a0ba84dce49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double computeReprojectionErrors</definition>
        <argsstring>(const vector&lt; vector&lt; Point3f &gt; &gt; &amp;objectPoints, const vector&lt; vector&lt; Point2f &gt; &gt; &amp;imagePoints, const vector&lt; Mat &gt; &amp;rvecs, const vector&lt; Mat &gt; &amp;tvecs, const Mat &amp;cameraMatrix, const Mat &amp;distCoeffs, vector&lt; float &gt; &amp;perViewErrors)</argsstring>
        <name>computeReprojectionErrors</name>
        <param>
          <type>const vector&lt; vector&lt; Point3f &gt; &gt; &amp;</type>
          <declname>objectPoints</declname>
        </param>
        <param>
          <type>const vector&lt; vector&lt; Point2f &gt; &gt; &amp;</type>
          <declname>imagePoints</declname>
        </param>
        <param>
          <type>const vector&lt; Mat &gt; &amp;</type>
          <declname>rvecs</declname>
        </param>
        <param>
          <type>const vector&lt; Mat &gt; &amp;</type>
          <declname>tvecs</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>vector&lt; float &gt; &amp;</type>
          <declname>perViewErrors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencvcalibration.cpp" line="393" column="1" bodyfile="opencvcalibration.cpp" bodystart="393" bodyend="417"/>
        <referencedby refid="opencvcalibration_8cpp_1a7ee968c34a2834af6e2064abfc0e8a33" compoundref="opencvcalibration_8cpp" startline="443" endline="471">runCalibration</referencedby>
      </memberdef>
      <memberdef kind="function" id="opencvcalibration_8cpp_1a07b7193caff05b5802b3dfc25cac3020" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void calcBoardCornerPositions</definition>
        <argsstring>(Size boardSize, float squareSize, vector&lt; Point3f &gt; &amp;corners, Settings::Pattern patternType)</argsstring>
        <name>calcBoardCornerPositions</name>
        <param>
          <type>Size</type>
          <declname>boardSize</declname>
        </param>
        <param>
          <type>float</type>
          <declname>squareSize</declname>
        </param>
        <param>
          <type>vector&lt; Point3f &gt; &amp;</type>
          <declname>corners</declname>
        </param>
        <param>
          <type><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8" kindref="member">Settings::Pattern</ref></type>
          <declname>patternType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencvcalibration.cpp" line="419" column="1" bodyfile="opencvcalibration.cpp" bodystart="419" bodyend="441"/>
        <references refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8ae96aa2d60b4a554a215524a05b32908e" compoundref="opencvcalibration_8cpp" startline="29">Settings::CHESSBOARD</references>
        <references refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8a79472d1c69f8ed7aa1b55f908b136f68" compoundref="opencvcalibration_8cpp" startline="29">Settings::CIRCLES_GRID</references>
        <references refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8a2cea29ee5896f2cb4cc64df25fd2375b" compoundref="opencvcalibration_8cpp" startline="29">Settings::ASYMMETRIC_CIRCLES_GRID</references>
        <referencedby refid="opencvcalibration_8cpp_1a7ee968c34a2834af6e2064abfc0e8a33" compoundref="opencvcalibration_8cpp" startline="443" endline="471">runCalibration</referencedby>
      </memberdef>
      <memberdef kind="function" id="opencvcalibration_8cpp_1a7ee968c34a2834af6e2064abfc0e8a33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool runCalibration</definition>
        <argsstring>(Settings &amp;s, Size &amp;imageSize, Mat &amp;cameraMatrix, Mat &amp;distCoeffs, vector&lt; vector&lt; Point2f &gt; &gt; imagePoints, vector&lt; Mat &gt; &amp;rvecs, vector&lt; Mat &gt; &amp;tvecs, vector&lt; float &gt; &amp;reprojErrs, double &amp;totalAvgErr)</argsstring>
        <name>runCalibration</name>
        <param>
          <type><ref refid="class_settings" kindref="compound">Settings</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Size &amp;</type>
          <declname>imageSize</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; Point2f &gt; &gt;</type>
          <declname>imagePoints</declname>
        </param>
        <param>
          <type>vector&lt; Mat &gt; &amp;</type>
          <declname>rvecs</declname>
        </param>
        <param>
          <type>vector&lt; Mat &gt; &amp;</type>
          <declname>tvecs</declname>
        </param>
        <param>
          <type>vector&lt; float &gt; &amp;</type>
          <declname>reprojErrs</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>totalAvgErr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencvcalibration.cpp" line="443" column="1" bodyfile="opencvcalibration.cpp" bodystart="443" bodyend="471"/>
        <references refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" compoundref="opencvcalibration_8cpp" startline="206">Settings::flag</references>
        <references refid="opencvcalibration_8cpp_1a07b7193caff05b5802b3dfc25cac3020" compoundref="opencvcalibration_8cpp" startline="419" endline="441">calcBoardCornerPositions</references>
        <references refid="class_settings_1a5030a7164df923bb3b86dd7a0fc9af30" compoundref="opencvcalibration_8cpp" startline="183">Settings::boardSize</references>
        <references refid="class_settings_1a6c94708776ad1ce258fc44f2101f5941" compoundref="opencvcalibration_8cpp" startline="185">Settings::squareSize</references>
        <references refid="class_settings_1a94551b7ffe8ac60311b035b2905e9498" compoundref="opencvcalibration_8cpp" startline="184">Settings::calibrationPattern</references>
        <references refid="opencvcalibration_8cpp_1a2277a0ba6f2ae1de4ae57a0ba84dce49" compoundref="opencvcalibration_8cpp" startline="393" endline="417">computeReprojectionErrors</references>
        <referencedby refid="opencvcalibration_8cpp_1ac7558c8da6af683fc1c86c2ede7bb31c" compoundref="opencvcalibration_8cpp" startline="552" endline="567">runCalibrationAndSave</referencedby>
      </memberdef>
      <memberdef kind="function" id="opencvcalibration_8cpp_1af5f02ae74089537e31f8d4e3cb83e46d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void saveCameraParams</definition>
        <argsstring>(Settings &amp;s, Size &amp;imageSize, Mat &amp;cameraMatrix, Mat &amp;distCoeffs, const vector&lt; Mat &gt; &amp;rvecs, const vector&lt; Mat &gt; &amp;tvecs, const vector&lt; float &gt; &amp;reprojErrs, const vector&lt; vector&lt; Point2f &gt; &gt; &amp;imagePoints, double totalAvgErr)</argsstring>
        <name>saveCameraParams</name>
        <param>
          <type><ref refid="class_settings" kindref="compound">Settings</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Size &amp;</type>
          <declname>imageSize</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>const vector&lt; Mat &gt; &amp;</type>
          <declname>rvecs</declname>
        </param>
        <param>
          <type>const vector&lt; Mat &gt; &amp;</type>
          <declname>tvecs</declname>
        </param>
        <param>
          <type>const vector&lt; float &gt; &amp;</type>
          <declname>reprojErrs</declname>
        </param>
        <param>
          <type>const vector&lt; vector&lt; Point2f &gt; &gt; &amp;</type>
          <declname>imagePoints</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totalAvgErr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opencvcalibration.cpp" line="474" column="1" bodyfile="opencvcalibration.cpp" bodystart="474" bodyend="550"/>
        <references refid="class_settings_1a9468f1ad53e982f9541d76c8d3228900" compoundref="opencvcalibration_8cpp" startline="194">Settings::outputFileName</references>
        <references refid="class_settings_1a5030a7164df923bb3b86dd7a0fc9af30" compoundref="opencvcalibration_8cpp" startline="183">Settings::boardSize</references>
        <references refid="class_settings_1a6c94708776ad1ce258fc44f2101f5941" compoundref="opencvcalibration_8cpp" startline="185">Settings::squareSize</references>
        <references refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" compoundref="opencvcalibration_8cpp" startline="206">Settings::flag</references>
        <references refid="class_settings_1af55c910308a0d773055d0b19261bb3b8" compoundref="opencvcalibration_8cpp" startline="187">Settings::aspectRatio</references>
        <referencedby refid="opencvcalibration_8cpp_1ac7558c8da6af683fc1c86c2ede7bb31c" compoundref="opencvcalibration_8cpp" startline="552" endline="567">runCalibrationAndSave</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/core/core.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/imgproc/imgproc.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/calib3d/calib3d.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/highgui/highgui.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="opencvcalibration_8cpp_1af08ec37a8c99d747fb60fa15bc28678b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">cv;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="opencvcalibration_8cpp_1ad8c51bbfda76f19f61c727838e6eee30" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="opencvcalibration_8cpp_1ad8c51bbfda76f19f61c727838e6eee30" kindref="member">help</ref>()</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>camera<sp/>calibration<sp/>sample.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;Usage:<sp/>calibration<sp/>configurationFile&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;Near<sp/>the<sp/>sample<sp/>file<sp/>you&apos;ll<sp/>find<sp/>the<sp/>configuration<sp/>file,<sp/>which<sp/>has<sp/>detailed<sp/>help<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;how<sp/>to<sp/>edit<sp/>it.<sp/><sp/>It<sp/>may<sp/>be<sp/>any<sp/>OpenCV<sp/>supported<sp/>file<sp/>format<sp/>XML/YAML.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25" refid="class_settings" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_settings" kindref="compound">Settings</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28" refid="class_settings_1ab7169a6eefce79566dd07db3b1e5e967" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_settings_1ab7169a6eefce79566dd07db3b1e5e967" kindref="member">Settings</ref>()<sp/>:<sp/>goodInput(false)<sp/>{}</highlight></codeline>
<codeline lineno="29" refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8" kindref="member">Pattern</ref><sp/>{<sp/>NOT_EXISTING,<sp/>CHESSBOARD,<sp/>CIRCLES_GRID,<sp/>ASYMMETRIC_CIRCLES_GRID<sp/>};</highlight></codeline>
<codeline lineno="30" refid="class_settings_1a5afe85d24b071973a7f248c05386f7f4ac9fd97535bc651249f9eed1fddf2d36b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a5afe85d24b071973a7f248c05386f7f4" kindref="member">InputType</ref><sp/>{INVALID,<sp/>CAMERA,<sp/><ref refid="class_settings_1a5afe85d24b071973a7f248c05386f7f4ac9fd97535bc651249f9eed1fddf2d36b" kindref="member">VIDEO_FILE</ref>,<sp/>IMAGE_LIST};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_settings_1a0785cc2055091b2a857b1dcefe291acc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a0785cc2055091b2a857b1dcefe291acc" kindref="member">write</ref>(FileStorage&amp;<sp/>fs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Write<sp/>serialization<sp/>for<sp/>this<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BoardSize_Width&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>boardSize.width</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BoardSize_Height&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boardSize.height</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Square_Size&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>squareSize</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calibrate_Pattern&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>patternToUse</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calibrate_NrOfFrameToUse&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nrFrames</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calibrate_FixAspectRatio&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aspectRatio</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calibrate_AssumeZeroTangentialDistortion&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>calibZeroTangentDist</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Calibrate_FixPrincipalPointAtTheCenter&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>calibFixPrincipalPoint</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Write_DetectedFeaturePoints&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bwritePoints</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Write_extrinsicParameters&quot;</highlight><highlight class="normal"><sp/><sp/><sp/>&lt;&lt;<sp/>bwriteExtrinsics</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Write_outputFileName&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>outputFileName</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Show_UndistortedImage&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>showUndistorsed</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input_FlipAroundHorizontalAxis&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flipVertical</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input_Delay&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>delay</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>input</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54" refid="class_settings_1a2d7841f8441095032e0f3b7d20adfd3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a2d7841f8441095032e0f3b7d20adfd3f" kindref="member">read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FileNode&amp;<sp/>node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Read<sp/>serialization<sp/>for<sp/>this<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;BoardSize_Width&quot;</highlight><highlight class="normal"><sp/>]<sp/>&gt;&gt;<sp/>boardSize.width;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;BoardSize_Height&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>boardSize.height;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Calibrate_Pattern&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>patternToUse;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Square_Size&quot;</highlight><highlight class="normal">]<sp/><sp/>&gt;&gt;<sp/>squareSize;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Calibrate_NrOfFrameToUse&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>nrFrames;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Calibrate_FixAspectRatio&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>aspectRatio;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Write_DetectedFeaturePoints&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>bwritePoints;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Write_extrinsicParameters&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>bwriteExtrinsics;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Write_outputFileName&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>outputFileName;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Calibrate_AssumeZeroTangentialDistortion&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>calibZeroTangentDist;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Calibrate_FixPrincipalPointAtTheCenter&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>calibFixPrincipalPoint;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Input_FlipAroundHorizontalAxis&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>flipVertical;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Show_UndistortedImage&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>showUndistorsed;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Input&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>input;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node[</highlight><highlight class="stringliteral">&quot;Input_Delay&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>delay;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interprate();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73" refid="class_settings_1ac01c17bf3536e296f1076e50cdcb00cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_settings_1ac01c17bf3536e296f1076e50cdcb00cd" kindref="member">interprate</ref>()</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goodInput<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boardSize.width<sp/>&lt;=<sp/>0<sp/>||<sp/>boardSize.height<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Board<sp/>size:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boardSize.width<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boardSize.height<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goodInput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(squareSize<sp/>&lt;=<sp/>10e-6)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>square<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>squareSize<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goodInput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nrFrames<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>number<sp/>of<sp/>frames<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nrFrames<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goodInput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input.empty())<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>valid<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputType<sp/>=<sp/>INVALID;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input[0]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>input[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss(input);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>cameraID;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputType<sp/>=<sp/>CAMERA;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isListOfImages(input)<sp/>&amp;&amp;<sp/>readStringList(input,<sp/>imageList))</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputType<sp/>=<sp/>IMAGE_LIST;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrFrames<sp/>=<sp/>(nrFrames<sp/>&lt;<sp/>(int)imageList.size())<sp/>?<sp/>nrFrames<sp/>:<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)imageList.size();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputType<sp/>=<sp/>VIDEO_FILE;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputType<sp/>==<sp/>CAMERA)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputCapture.open(cameraID);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputType<sp/>==<sp/>VIDEO_FILE)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputCapture.open(input);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputType<sp/>!=<sp/>IMAGE_LIST<sp/>&amp;&amp;<sp/>!inputCapture.isOpened())</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputType<sp/>=<sp/>INVALID;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputType<sp/>==<sp/>INVALID)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Inexistent<sp/>input:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>input;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goodInput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(calibFixPrincipalPoint)<sp/>flag<sp/>|=<sp/>CV_CALIB_FIX_PRINCIPAL_POINT;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(calibZeroTangentDist)<sp/><sp/><sp/>flag<sp/>|=<sp/>CV_CALIB_ZERO_TANGENT_DIST;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(aspectRatio)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>|=<sp/>CV_CALIB_FIX_ASPECT_RATIO;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calibrationPattern<sp/>=<sp/>NOT_EXISTING;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!patternToUse.compare(</highlight><highlight class="stringliteral">&quot;CHESSBOARD&quot;</highlight><highlight class="normal">))<sp/>calibrationPattern<sp/>=<sp/>CHESSBOARD;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!patternToUse.compare(</highlight><highlight class="stringliteral">&quot;CIRCLES_GRID&quot;</highlight><highlight class="normal">))<sp/>calibrationPattern<sp/>=<sp/>CIRCLES_GRID;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!patternToUse.compare(</highlight><highlight class="stringliteral">&quot;ASYMMETRIC_CIRCLES_GRID&quot;</highlight><highlight class="normal">))<sp/>calibrationPattern<sp/>=<sp/>ASYMMETRIC_CIRCLES_GRID;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(calibrationPattern<sp/>==<sp/>NOT_EXISTING)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Inexistent<sp/>camera<sp/>calibration<sp/>mode:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>patternToUse<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goodInput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atImageList<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143" refid="class_settings_1a7701462e928f2425b342440fba9973e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/><ref refid="class_settings_1a7701462e928f2425b342440fba9973e5" kindref="member">nextImage</ref>()</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>result;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>inputCapture.isOpened()<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>view0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputCapture<sp/>&gt;&gt;<sp/>view0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view0.copyTo(result);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atImageList<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)imageList.size()<sp/>)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>imread(imageList[atImageList++],<sp/>CV_LOAD_IMAGE_COLOR);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="class_settings_1ae57696cead99c4f0c528e33793866457" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_settings_1ae57696cead99c4f0c528e33793866457" kindref="member">readStringList</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>filename,<sp/>vector&lt;string&gt;&amp;<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.clear();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FileStorage<sp/>fs(filename,<sp/>FileStorage::READ);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!fs.isOpened()<sp/>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FileNode<sp/>n<sp/>=<sp/>fs.getFirstTopLevelNode();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>n.type()<sp/>!=<sp/>FileNode::SEQ<sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FileNodeIterator<sp/>it<sp/>=<sp/>n.begin(),<sp/>it_end<sp/>=<sp/>n.end();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>it<sp/>!=<sp/>it_end;<sp/>++it<sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.push_back((</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)*it);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="class_settings_1ae7696860215ac20c48a5e7121c5dd32e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_settings_1ae7696860215ac20c48a5e7121c5dd32e" kindref="member">isListOfImages</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s(filename);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>file<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s.find(</highlight><highlight class="stringliteral">&quot;.xml&quot;</highlight><highlight class="normal">)<sp/>==<sp/>string::npos<sp/>&amp;&amp;<sp/>s.find(</highlight><highlight class="stringliteral">&quot;.yaml&quot;</highlight><highlight class="normal">)<sp/>==<sp/>string::npos<sp/>&amp;&amp;<sp/>s.find(</highlight><highlight class="stringliteral">&quot;.yml&quot;</highlight><highlight class="normal">)<sp/>==<sp/>string::npos<sp/>)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="183" refid="class_settings_1a5030a7164df923bb3b86dd7a0fc9af30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Size<sp/><ref refid="class_settings_1a5030a7164df923bb3b86dd7a0fc9af30" kindref="member">boardSize</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>of<sp/>the<sp/>board<sp/>-&gt;<sp/>Number<sp/>of<sp/>items<sp/>by<sp/>width<sp/>and<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="class_settings_1a94551b7ffe8ac60311b035b2905e9498" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8" kindref="member">Pattern</ref><sp/><ref refid="class_settings_1a94551b7ffe8ac60311b035b2905e9498" kindref="member">calibrationPattern</ref>;</highlight><highlight class="comment">//<sp/>One<sp/>of<sp/>the<sp/>Chessboard,<sp/>circles,<sp/>or<sp/>asymmetric<sp/>circle<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="class_settings_1a6c94708776ad1ce258fc44f2101f5941" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a6c94708776ad1ce258fc44f2101f5941" kindref="member">squareSize</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>of<sp/>a<sp/>square<sp/>in<sp/>your<sp/>defined<sp/>unit<sp/>(point,<sp/>millimeter,etc).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="class_settings_1a7e6654cd0e51791ed687eaa85f8fc143" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a7e6654cd0e51791ed687eaa85f8fc143" kindref="member">nrFrames</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>frames<sp/>to<sp/>use<sp/>from<sp/>the<sp/>input<sp/>for<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="class_settings_1af55c910308a0d773055d0b19261bb3b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_settings_1af55c910308a0d773055d0b19261bb3b8" kindref="member">aspectRatio</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>aspect<sp/>ratio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="class_settings_1a5fe947366441009187d633f9e4663256" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a5fe947366441009187d633f9e4663256" kindref="member">delay</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>of<sp/>a<sp/>video<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="class_settings_1ab4aac97bdb5696d60b35a29c26497064" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_settings_1ab4aac97bdb5696d60b35a29c26497064" kindref="member">bwritePoints</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Write<sp/>detected<sp/>feature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="class_settings_1af1ac412d660e25aea698c76fa88de57c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_settings_1af1ac412d660e25aea698c76fa88de57c" kindref="member">bwriteExtrinsics</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>extrinsic<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="class_settings_1a4bc7ff147d74721a3587ce6fcb64ef32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a4bc7ff147d74721a3587ce6fcb64ef32" kindref="member">calibZeroTangentDist</ref>;<sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>zero<sp/>tangential<sp/>distortion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="class_settings_1a44397eea3f08a0c78808c38bdd716594" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a44397eea3f08a0c78808c38bdd716594" kindref="member">calibFixPrincipalPoint</ref>;</highlight><highlight class="comment">//<sp/>Fix<sp/>the<sp/>principal<sp/>point<sp/>at<sp/>the<sp/>center</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="class_settings_1ab6304f260b315d2820f755e1c3a052b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_settings_1ab6304f260b315d2820f755e1c3a052b5" kindref="member">flipVertical</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flip<sp/>the<sp/>captured<sp/>images<sp/>around<sp/>the<sp/>horizontal<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="class_settings_1a9468f1ad53e982f9541d76c8d3228900" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a9468f1ad53e982f9541d76c8d3228900" kindref="member">outputFileName</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>name<sp/>of<sp/>the<sp/>file<sp/>where<sp/>to<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="class_settings_1a935d6f27ee454e9fee63f8b662f48a06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a935d6f27ee454e9fee63f8b662f48a06" kindref="member">showUndistorsed</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Show<sp/>undistorted<sp/>images<sp/>after<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="class_settings_1a9970d51ab47b6560ab11b267637b6219" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a9970d51ab47b6560ab11b267637b6219" kindref="member">input</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>input<sp/>-&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="class_settings_1af32a5ff06192bde106c934e0361bcd7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_settings_1af32a5ff06192bde106c934e0361bcd7e" kindref="member">cameraID</ref>;</highlight></codeline>
<codeline lineno="201" refid="class_settings_1ae261128a69d1d3d2b0f5315aff8066c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/><ref refid="class_settings_1ae261128a69d1d3d2b0f5315aff8066c8" kindref="member">imageList</ref>;</highlight></codeline>
<codeline lineno="202" refid="class_settings_1a80061aedf354e63cb6c4c1fb7c4a9055" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a80061aedf354e63cb6c4c1fb7c4a9055" kindref="member">atImageList</ref>;</highlight></codeline>
<codeline lineno="203" refid="class_settings_1abd5706146b34d3c32aef4025dcd2ec1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VideoCapture<sp/><ref refid="class_settings_1abd5706146b34d3c32aef4025dcd2ec1b" kindref="member">inputCapture</ref>;</highlight></codeline>
<codeline lineno="204" refid="class_settings_1a89fb14ce9856fb642f18bb0f7c5b8868" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_settings_1a5afe85d24b071973a7f248c05386f7f4" kindref="member">InputType</ref><sp/><ref refid="class_settings_1a89fb14ce9856fb642f18bb0f7c5b8868" kindref="member">inputType</ref>;</highlight></codeline>
<codeline lineno="205" refid="class_settings_1a3b9fc27b555f982bd5b9ea5198e1f7e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a3b9fc27b555f982bd5b9ea5198e1f7e3" kindref="member">goodInput</ref>;</highlight></codeline>
<codeline lineno="206" refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" kindref="member">flag</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="209" refid="class_settings_1ae8df4a531058c0dc6b544aff531e55ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_settings_1ae8df4a531058c0dc6b544aff531e55ef" kindref="member">patternToUse</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="opencvcalibration_8cpp_1af02cd4568d8391f719476b7ea59b1850" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="opencvcalibration_8cpp_1af02cd4568d8391f719476b7ea59b1850" kindref="member">read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FileNode&amp;<sp/>node,<sp/><ref refid="class_settings" kindref="compound">Settings</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_settings" kindref="compound">Settings</ref>&amp;<sp/>default_value<sp/>=<sp/><ref refid="class_settings" kindref="compound">Settings</ref>())</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(node.empty())</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>default_value;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.<ref refid="class_settings_1a2d7841f8441095032e0f3b7d20adfd3f" kindref="member">read</ref>(node);</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba167a7ee1aabe9f27e010fff93c0ba971" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba167a7ee1aabe9f27e010fff93c0ba971" kindref="member">DETECTION</ref><sp/>=<sp/>0,<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba53f5d985011ab26db21516188f46a94f" kindref="member">CAPTURING</ref><sp/>=<sp/>1,<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55baf7834eaf5a327e180e039aa05dd3ebd1" kindref="member">CALIBRATED</ref><sp/>=<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="opencvcalibration_8cpp_1ac7558c8da6af683fc1c86c2ede7bb31c" kindref="member">runCalibrationAndSave</ref>(<ref refid="class_settings" kindref="compound">Settings</ref>&amp;<sp/>s,<sp/>Size<sp/>imageSize,<sp/>Mat&amp;<sp/><sp/>cameraMatrix,<sp/>Mat&amp;<sp/>distCoeffs,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;Point2f&gt;<sp/>&gt;<sp/>imagePoints<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="opencvcalibration_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="opencvcalibration_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="opencvcalibration_8cpp_1ad8c51bbfda76f19f61c727838e6eee30" kindref="member">help</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_settings" kindref="compound">Settings</ref><sp/>s;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>inputSettingsFile<sp/>=<sp/>argc<sp/>&gt;<sp/>1<sp/>?<sp/>argv[1]<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;default.xml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>FileStorage<sp/>fs(inputSettingsFile,<sp/>FileStorage::READ);<sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fs.isOpened())</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>the<sp/>configuration<sp/>file:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inputSettingsFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>fs[</highlight><highlight class="stringliteral">&quot;Settings&quot;</highlight><highlight class="normal">]<sp/>&gt;&gt;<sp/>s;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>fs.release();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>Settings<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.goodInput)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>input<sp/>detected.<sp/>Application<sp/>stopping.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;Point2f&gt;<sp/>&gt;<sp/>imagePoints;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>cameraMatrix,<sp/>distCoeffs;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>Size<sp/>imageSize;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode<sp/>=<sp/>s.<ref refid="class_settings_1a89fb14ce9856fb642f18bb0f7c5b8868" kindref="member">inputType</ref><sp/>==<sp/><ref refid="class_settings_1a5afe85d24b071973a7f248c05386f7f4a292bd2e5ba912a92ace1606e366edc4d" kindref="member">Settings::IMAGE_LIST</ref><sp/>?<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba53f5d985011ab26db21516188f46a94f" kindref="member">CAPTURING</ref><sp/>:<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba167a7ee1aabe9f27e010fff93c0ba971" kindref="member">DETECTION</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_t<sp/>prevTimestamp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar<sp/>RED(0,0,255),<sp/>GREEN(0,255,0);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ESC_KEY<sp/>=<sp/>27;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;;++i)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>view;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blinkOutput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>view<sp/>=<sp/>s.nextImage();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-----<sp/><sp/>If<sp/>no<sp/>more<sp/>image,<sp/>or<sp/>got<sp/>enough,<sp/>then<sp/>stop<sp/>calibration<sp/>and<sp/>show<sp/>result<sp/>-------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mode<sp/>==<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba53f5d985011ab26db21516188f46a94f" kindref="member">CAPTURING</ref><sp/>&amp;&amp;<sp/>imagePoints.size()<sp/>&gt;=<sp/>(unsigned)s.nrFrames<sp/>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="opencvcalibration_8cpp_1ac7558c8da6af683fc1c86c2ede7bb31c" kindref="member">runCalibrationAndSave</ref>(s,<sp/>imageSize,<sp/><sp/>cameraMatrix,<sp/>distCoeffs,<sp/>imagePoints))</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55baf7834eaf5a327e180e039aa05dd3ebd1" kindref="member">CALIBRATED</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba167a7ee1aabe9f27e010fff93c0ba971" kindref="member">DETECTION</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view.empty())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>more<sp/>images<sp/>then<sp/>run<sp/>calibration,<sp/>save<sp/>and<sp/>stop<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>imagePoints.size()<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="opencvcalibration_8cpp_1ac7558c8da6af683fc1c86c2ede7bb31c" kindref="member">runCalibrationAndSave</ref>(s,<sp/>imageSize,<sp/><sp/>cameraMatrix,<sp/>distCoeffs,<sp/>imagePoints);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageSize<sp/>=<sp/>view.size();<sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>input<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s.flipVertical<sp/>)<sp/><sp/><sp/><sp/>flip(<sp/>view,<sp/>view,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Point2f&gt;<sp/>pointBuf;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>s.calibrationPattern<sp/>)<sp/></highlight><highlight class="comment">//<sp/>Find<sp/>feature<sp/>points<sp/>on<sp/>the<sp/>input<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8ae96aa2d60b4a554a215524a05b32908e" kindref="member">Settings::CHESSBOARD</ref>:</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>findChessboardCorners(<sp/>view,<sp/>s.boardSize,<sp/>pointBuf,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_CALIB_CB_ADAPTIVE_THRESH<sp/>|<sp/>CV_CALIB_CB_FAST_CHECK<sp/>|<sp/>CV_CALIB_CB_NORMALIZE_IMAGE);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8a79472d1c69f8ed7aa1b55f908b136f68" kindref="member">Settings::CIRCLES_GRID</ref>:</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>findCirclesGrid(<sp/>view,<sp/>s.boardSize,<sp/>pointBuf<sp/>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8a2cea29ee5896f2cb4cc64df25fd2375b" kindref="member">Settings::ASYMMETRIC_CIRCLES_GRID</ref>:</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>findCirclesGrid(<sp/>view,<sp/>s.boardSize,<sp/>pointBuf,<sp/>CALIB_CB_ASYMMETRIC_GRID<sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>found)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>done<sp/>with<sp/>success,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>improve<sp/>the<sp/>found<sp/>corners&apos;<sp/>coordinate<sp/>accuracy<sp/>for<sp/>chessboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s.calibrationPattern<sp/>==<sp/><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8ae96aa2d60b4a554a215524a05b32908e" kindref="member">Settings::CHESSBOARD</ref>)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>viewGray;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvtColor(view,<sp/>viewGray,<sp/>COLOR_BGR2GRAY);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cornerSubPix(<sp/>viewGray,<sp/>pointBuf,<sp/>Size(11,11),</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size(-1,-1),<sp/>TermCriteria(<sp/>CV_TERMCRIT_EPS+CV_TERMCRIT_ITER,<sp/>30,<sp/>0.1<sp/>));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mode<sp/>==<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba53f5d985011ab26db21516188f46a94f" kindref="member">CAPTURING</ref><sp/>&amp;&amp;<sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>camera<sp/>only<sp/>take<sp/>new<sp/>samples<sp/>after<sp/>delay<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!s.inputCapture.isOpened()<sp/>||<sp/>clock()<sp/>-<sp/>prevTimestamp<sp/>&gt;<sp/>s.delay*1e-3*CLOCKS_PER_SEC)<sp/>)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imagePoints.push_back(pointBuf);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevTimestamp<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blinkOutput<sp/>=<sp/>s.inputCapture.isOpened();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>the<sp/>corners.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawChessboardCorners(<sp/>view,<sp/>s.boardSize,<sp/>Mat(pointBuf),<sp/>found<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-----------------------------<sp/>Output<sp/>Text<sp/>------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/>(mode<sp/>==<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba53f5d985011ab26db21516188f46a94f" kindref="member">CAPTURING</ref>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;100/100&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>==<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55baf7834eaf5a327e180e039aa05dd3ebd1" kindref="member">CALIBRATED</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Calibrated&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Press<sp/>&apos;g&apos;<sp/>to<sp/>start&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>baseLine<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>textSize<sp/>=<sp/>getTextSize(msg,<sp/>1,<sp/>1,<sp/>1,<sp/>&amp;baseLine);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>textOrigin(view.cols<sp/>-<sp/>2*textSize.width<sp/>-<sp/>10,<sp/>view.rows<sp/>-<sp/>2*baseLine<sp/>-<sp/>10);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mode<sp/>==<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba53f5d985011ab26db21516188f46a94f" kindref="member">CAPTURING</ref><sp/>)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s.showUndistorsed)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>format(<sp/></highlight><highlight class="stringliteral">&quot;%d/%d<sp/>Undist&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)imagePoints.size(),<sp/>s.nrFrames<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>format(<sp/></highlight><highlight class="stringliteral">&quot;%d/%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)imagePoints.size(),<sp/>s.nrFrames<sp/>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>putText(<sp/>view,<sp/>msg,<sp/>textOrigin,<sp/>1,<sp/>1,<sp/>mode<sp/>==<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55baf7834eaf5a327e180e039aa05dd3ebd1" kindref="member">CALIBRATED</ref><sp/>?<sp/><sp/>GREEN<sp/>:<sp/>RED);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>blinkOutput<sp/>)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitwise_not(view,<sp/>view);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------<sp/>Video<sp/>capture<sp/><sp/>output<sp/><sp/>undistorted<sp/>------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mode<sp/>==<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55baf7834eaf5a327e180e039aa05dd3ebd1" kindref="member">CALIBRATED</ref><sp/>&amp;&amp;<sp/>s.showUndistorsed<sp/>)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>temp<sp/>=<sp/>view.clone();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undistort(temp,<sp/>view,<sp/>cameraMatrix,<sp/>distCoeffs);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------<sp/>Show<sp/>image<sp/>and<sp/>check<sp/>for<sp/>input<sp/>commands<sp/>-------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imshow(</highlight><highlight class="stringliteral">&quot;Image<sp/>View&quot;</highlight><highlight class="normal">,<sp/>view);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>(char)waitKey(s.inputCapture.isOpened()<sp/>?<sp/>50<sp/>:<sp/>s.delay);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>key<sp/><sp/>==<sp/>ESC_KEY<sp/>)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>key<sp/>==<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>mode<sp/>==<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55baf7834eaf5a327e180e039aa05dd3ebd1" kindref="member">CALIBRATED</ref><sp/>)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.showUndistorsed<sp/>=<sp/>!s.showUndistorsed;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s.inputCapture.isOpened()<sp/>&amp;&amp;<sp/>key<sp/>==<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/><ref refid="opencvcalibration_8cpp_1a06fc87d81c62e9abb8790b6e5713c55ba53f5d985011ab26db21516188f46a94f" kindref="member">CAPTURING</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imagePoints.clear();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----------------------Show<sp/>the<sp/>undistorted<sp/>image<sp/>for<sp/>the<sp/>image<sp/>list<sp/>------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s.inputType<sp/>==<sp/><ref refid="class_settings_1a5afe85d24b071973a7f248c05386f7f4a292bd2e5ba912a92ace1606e366edc4d" kindref="member">Settings::IMAGE_LIST</ref><sp/>&amp;&amp;<sp/>s.showUndistorsed<sp/>)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>view,<sp/>rview,<sp/>map1,<sp/>map2;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initUndistortRectifyMap(cameraMatrix,<sp/>distCoeffs,<sp/>Mat(),</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getOptimalNewCameraMatrix(cameraMatrix,<sp/>distCoeffs,<sp/>imageSize,<sp/>1,<sp/>imageSize,<sp/>0),</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageSize,<sp/>CV_16SC2,<sp/>map1,<sp/>map2);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)s.imageList.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view<sp/>=<sp/>imread(s.imageList[i],<sp/>1);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view.empty())</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remap(view,<sp/>rview,<sp/>map1,<sp/>map2,<sp/>INTER_LINEAR);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imshow(</highlight><highlight class="stringliteral">&quot;Image<sp/>View&quot;</highlight><highlight class="normal">,<sp/>rview);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>(char)waitKey();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>c<sp/><sp/>==<sp/>ESC_KEY<sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;q&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;Q&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="opencvcalibration_8cpp_1a2277a0ba6f2ae1de4ae57a0ba84dce49" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="opencvcalibration_8cpp_1a2277a0ba6f2ae1de4ae57a0ba84dce49" kindref="member">computeReprojectionErrors</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vector&lt;Point3f&gt;<sp/>&gt;&amp;<sp/>objectPoints,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vector&lt;Point2f&gt;<sp/>&gt;&amp;<sp/>imagePoints,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;Mat&gt;&amp;<sp/>rvecs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;Mat&gt;&amp;<sp/>tvecs,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat&amp;<sp/>cameraMatrix<sp/>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mat&amp;<sp/>distCoeffs,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;float&gt;&amp;<sp/>perViewErrors)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Point2f&gt;<sp/>imagePoints2;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>totalPoints<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalErr<sp/>=<sp/>0,<sp/>err;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>perViewErrors.resize(objectPoints.size());</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)objectPoints.size();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projectPoints(<sp/>Mat(objectPoints[i]),<sp/>rvecs[i],<sp/>tvecs[i],<sp/>cameraMatrix,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distCoeffs,<sp/>imagePoints2);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>norm(Mat(imagePoints[i]),<sp/>Mat(imagePoints2),<sp/>CV_L2);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(int)objectPoints[i].size();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perViewErrors[i]<sp/>=<sp/>(float)<sp/>std::sqrt(err*err/n);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalErr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+=<sp/>err*err;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalPoints<sp/><sp/><sp/><sp/><sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(totalErr/totalPoints);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="opencvcalibration_8cpp_1a07b7193caff05b5802b3dfc25cac3020" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="opencvcalibration_8cpp_1a07b7193caff05b5802b3dfc25cac3020" kindref="member">calcBoardCornerPositions</ref>(Size<sp/>boardSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>squareSize,<sp/>vector&lt;Point3f&gt;&amp;<sp/>corners,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8" kindref="member">Settings::Pattern</ref><sp/>patternType<sp/></highlight><highlight class="comment">/*=<sp/>Settings::CHESSBOARD*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>corners.clear();</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(patternType)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8ae96aa2d60b4a554a215524a05b32908e" kindref="member">Settings::CHESSBOARD</ref>:</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8a79472d1c69f8ed7aa1b55f908b136f68" kindref="member">Settings::CIRCLES_GRID</ref>:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>boardSize.height;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>boardSize.width;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corners.push_back(Point3f(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(<sp/>j*squareSize<sp/>),<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(<sp/>i*squareSize<sp/>),<sp/>0));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_settings_1a0e7117abd9427a6f8bc1d1d8d456b5c8a2cea29ee5896f2cb4cc64df25fd2375b" kindref="member">Settings::ASYMMETRIC_CIRCLES_GRID</ref>:</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>boardSize.height;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>boardSize.width;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corners.push_back(Point3f(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">((2*j<sp/>+<sp/>i<sp/>%<sp/>2)*squareSize),<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(i*squareSize),<sp/>0));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="opencvcalibration_8cpp_1a7ee968c34a2834af6e2064abfc0e8a33" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="opencvcalibration_8cpp_1a7ee968c34a2834af6e2064abfc0e8a33" kindref="member">runCalibration</ref>(<sp/><ref refid="class_settings" kindref="compound">Settings</ref>&amp;<sp/>s,<sp/>Size&amp;<sp/>imageSize,<sp/>Mat&amp;<sp/>cameraMatrix,<sp/>Mat&amp;<sp/>distCoeffs,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;Point2f&gt;<sp/>&gt;<sp/>imagePoints,<sp/>vector&lt;Mat&gt;&amp;<sp/>rvecs,<sp/>vector&lt;Mat&gt;&amp;<sp/>tvecs,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;float&gt;&amp;<sp/>reprojErrs,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>totalAvgErr)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMatrix<sp/>=<sp/>Mat::eye(3,<sp/>3,<sp/>CV_64F);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s.<ref refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" kindref="member">flag</ref><sp/>&amp;<sp/>CV_CALIB_FIX_ASPECT_RATIO<sp/>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cameraMatrix.at&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(0,0)<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>distCoeffs<sp/>=<sp/>Mat::zeros(8,<sp/>1,<sp/>CV_64F);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;Point3f&gt;<sp/>&gt;<sp/>objectPoints(1);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="opencvcalibration_8cpp_1a07b7193caff05b5802b3dfc25cac3020" kindref="member">calcBoardCornerPositions</ref>(s.<ref refid="class_settings_1a5030a7164df923bb3b86dd7a0fc9af30" kindref="member">boardSize</ref>,<sp/>s.<ref refid="class_settings_1a6c94708776ad1ce258fc44f2101f5941" kindref="member">squareSize</ref>,<sp/>objectPoints[0],<sp/>s.<ref refid="class_settings_1a94551b7ffe8ac60311b035b2905e9498" kindref="member">calibrationPattern</ref>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>objectPoints.resize(imagePoints.size(),objectPoints[0]);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Find<sp/>intrinsic<sp/>and<sp/>extrinsic<sp/>camera<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rms<sp/>=<sp/>calibrateCamera(objectPoints,<sp/>imagePoints,<sp/>imageSize,<sp/>cameraMatrix,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distCoeffs,<sp/>rvecs,<sp/>tvecs,<sp/>s.<ref refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" kindref="member">flag</ref>|CV_CALIB_FIX_K4|CV_CALIB_FIX_K5);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Re-projection<sp/>error<sp/>reported<sp/>by<sp/>calibrateCamera:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>rms<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>checkRange(cameraMatrix)<sp/>&amp;&amp;<sp/>checkRange(distCoeffs);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>totalAvgErr<sp/>=<sp/><ref refid="opencvcalibration_8cpp_1a2277a0ba6f2ae1de4ae57a0ba84dce49" kindref="member">computeReprojectionErrors</ref>(objectPoints,<sp/>imagePoints,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvecs,<sp/>tvecs,<sp/>cameraMatrix,<sp/>distCoeffs,<sp/>reprojErrs);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>camera<sp/>parameters<sp/>to<sp/>the<sp/>output<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="opencvcalibration_8cpp_1af5f02ae74089537e31f8d4e3cb83e46d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="opencvcalibration_8cpp_1af5f02ae74089537e31f8d4e3cb83e46d" kindref="member">saveCameraParams</ref>(<sp/><ref refid="class_settings" kindref="compound">Settings</ref>&amp;<sp/>s,<sp/>Size&amp;<sp/>imageSize,<sp/>Mat&amp;<sp/>cameraMatrix,<sp/>Mat&amp;<sp/>distCoeffs,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;Mat&gt;&amp;<sp/>rvecs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;Mat&gt;&amp;<sp/>tvecs,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;float&gt;&amp;<sp/>reprojErrs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vector&lt;Point2f&gt;<sp/>&gt;&amp;<sp/>imagePoints,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalAvgErr<sp/>)</highlight></codeline>
<codeline lineno="478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>FileStorage<sp/>fs(<sp/>s.<ref refid="class_settings_1a9468f1ad53e982f9541d76c8d3228900" kindref="member">outputFileName</ref>,<sp/>FileStorage::WRITE<sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>tm;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>time(<sp/>&amp;tm<sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*t2<sp/>=<sp/>localtime(<sp/>&amp;tm<sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[1024];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>strftime(<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf)-1,<sp/></highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>t2<sp/>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;calibration_Time&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>buf;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!rvecs.empty()<sp/>||<sp/>!reprojErrs.empty()<sp/>)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nrOfFrames&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)std::max(rvecs.size(),<sp/>reprojErrs.size());</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image_Width&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>imageSize.width;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;image_Height&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>imageSize.height;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;board_Width&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s.<ref refid="class_settings_1a5030a7164df923bb3b86dd7a0fc9af30" kindref="member">boardSize</ref>.width;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;board_Height&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s.<ref refid="class_settings_1a5030a7164df923bb3b86dd7a0fc9af30" kindref="member">boardSize</ref>.height;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;square_Size&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s.<ref refid="class_settings_1a6c94708776ad1ce258fc44f2101f5941" kindref="member">squareSize</ref>;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s.<ref refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" kindref="member">flag</ref><sp/>&amp;<sp/>CV_CALIB_FIX_ASPECT_RATIO<sp/>)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FixAspectRatio&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s.<ref refid="class_settings_1af55c910308a0d773055d0b19261bb3b8" kindref="member">aspectRatio</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s.<ref refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" kindref="member">flag</ref><sp/>)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>buf,<sp/></highlight><highlight class="stringliteral">&quot;flags:<sp/>%s%s%s%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" kindref="member">flag</ref><sp/>&amp;<sp/>CV_CALIB_USE_INTRINSIC_GUESS<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+use_intrinsic_guess&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" kindref="member">flag</ref><sp/>&amp;<sp/>CV_CALIB_FIX_ASPECT_RATIO<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+fix_aspectRatio&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" kindref="member">flag</ref><sp/>&amp;<sp/>CV_CALIB_FIX_PRINCIPAL_POINT<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+fix_principal_point&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" kindref="member">flag</ref><sp/>&amp;<sp/>CV_CALIB_ZERO_TANGENT_DIST<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+zero_tangent_dist&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvWriteComment(<sp/>*fs,<sp/>buf,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;flagValue&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s.<ref refid="class_settings_1aba5691e3e76525f93ea254e654ec3717" kindref="member">flag</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Camera_Matrix&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cameraMatrix;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Distortion_Coefficients&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>distCoeffs;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Avg_Reprojection_Error&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>totalAvgErr;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!reprojErrs.empty()<sp/>)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Per_View_Reprojection_Errors&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Mat(reprojErrs);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!rvecs.empty()<sp/>&amp;&amp;<sp/>!tvecs.empty()<sp/>)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_Assert(rvecs[0].type()<sp/>==<sp/>tvecs[0].type());</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>bigmat((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)rvecs.size(),<sp/>6,<sp/>rvecs[0].type());</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)rvecs.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>r<sp/>=<sp/>bigmat(Range(i,<sp/>i+1),<sp/>Range(0,3));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>t<sp/>=<sp/>bigmat(Range(i,<sp/>i+1),<sp/>Range(3,6));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_Assert(rvecs[i].rows<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>rvecs[i].cols<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_Assert(tvecs[i].rows<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>tvecs[i].cols<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//*.t()<sp/>is<sp/>MatExpr<sp/>(not<sp/>Mat)<sp/>so<sp/>we<sp/>can<sp/>use<sp/>assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>rvecs[i].t();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>tvecs[i].t();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvWriteComment(<sp/>*fs,<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>set<sp/>of<sp/>6-tuples<sp/>(rotation<sp/>vector<sp/>+<sp/>translation<sp/>vector)<sp/>for<sp/>each<sp/>view&quot;</highlight><highlight class="normal">,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Extrinsic_Parameters&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bigmat;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!imagePoints.empty()<sp/>)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>imagePtMat((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)imagePoints.size(),<sp/>(int)imagePoints[0].size(),<sp/>CV_32FC2);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)imagePoints.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>r<sp/>=<sp/>imagePtMat.row(i).reshape(2,<sp/>imagePtMat.cols);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>imgpti(imagePoints[i]);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgpti.copyTo(r);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Image_points&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>imagePtMat;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="opencvcalibration_8cpp_1ac7558c8da6af683fc1c86c2ede7bb31c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="opencvcalibration_8cpp_1ac7558c8da6af683fc1c86c2ede7bb31c" kindref="member">runCalibrationAndSave</ref>(<ref refid="class_settings" kindref="compound">Settings</ref>&amp;<sp/>s,<sp/>Size<sp/>imageSize,<sp/>Mat&amp;<sp/><sp/>cameraMatrix,<sp/>Mat&amp;<sp/>distCoeffs,vector&lt;vector&lt;Point2f&gt;<sp/>&gt;<sp/>imagePoints<sp/>)</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Mat&gt;<sp/>rvecs,<sp/>tvecs;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;float&gt;<sp/>reprojErrs;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalAvgErr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="opencvcalibration_8cpp_1a7ee968c34a2834af6e2064abfc0e8a33" kindref="member">runCalibration</ref>(s,imageSize,<sp/>cameraMatrix,<sp/>distCoeffs,<sp/>imagePoints,<sp/>rvecs,<sp/>tvecs,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reprojErrs,<sp/>totalAvgErr);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(ok<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Calibration<sp/>succeeded&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Calibration<sp/>failed&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>avg<sp/>re<sp/>projection<sp/>error<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>totalAvgErr<sp/>;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ok<sp/>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="opencvcalibration_8cpp_1af5f02ae74089537e31f8d4e3cb83e46d" kindref="member">saveCameraParams</ref>(<sp/>s,<sp/>imageSize,<sp/>cameraMatrix,<sp/>distCoeffs,<sp/>rvecs<sp/>,tvecs,<sp/>reprojErrs,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imagePoints,<sp/>totalAvgErr);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="opencvcalibration.cpp"/>
  </compounddef>
</doxygen>
